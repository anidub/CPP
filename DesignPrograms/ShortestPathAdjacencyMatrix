/* company : verkada
Given the adjacency matrix of the connected undirected graph with no loops or multiple edges, find the shortest distance (the path of the shortest length) between the two specified vertices.

Example
For
matrix = [[false, false, true],
          [false, false, true],
          [true, true, false]]
vertex1 = 0, and vertex2 = 1, the output should be
solution(matrix, vertex1, vertex2) = 2.

2: matrix:
[[false,true,true], 
 [true,false,false], 
 [true,false,false]]
vertex1: 0
vertex2: 2
Expected return value:1

3. matrix:
[[false,false,true], 
 [false,false,true], 
 [true,true,false]]
vertex1: 1
vertex2: 0
Expected return value:2

4. matrix:
[[false,true,false,false], 
 [true,false,true,true], 
 [false,true,false,true], 
 [false,true,true,false]]
vertex1: 2
vertex2: 0
Expected return value: 2
*/

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int shortestPath(vector<vector<bool>> &matrix, int vertex1, int vertex2) {
    int n = matrix.size(); // Number of vertices
    vector<bool> visited(n, false);
    queue<pair<int, int>> q; // {current_vertex, current_distance}

    // Start BFS from vertex1
    q.push({vertex1, 0});
    visited[vertex1] = true;

    while (!q.empty()) {
        int node = q.front().first;
        int dist = q.front().second;
        q.pop();

        // If we reach the target vertex, return distance
        if (node == vertex2) return dist;

        // Traverse all neighbors
        for (int neighbor = 0; neighbor < n; neighbor++) {
            if (matrix[node][neighbor] && !visited[neighbor]) {
                q.push({neighbor, dist + 1});
                visited[neighbor] = true;
            }
        }
    }

    return -1; // Should never reach here (graph is connected)
}

int main() {
    vector<vector<bool>> matrix = {
        {false, false, true},
        {false, false, true},
        {true, true, false}
    };

    int vertex1 = 0, vertex2 = 1;
    cout << "Shortest distance: " << shortestPath(matrix, vertex1, vertex2) << endl;
    return 0;
}
